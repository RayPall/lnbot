# streamlit_app.py
# ------------------------------------------------------------------------------
# Aplikace:
#   1) Generov√°n√≠ LinkedIn postu (s optional URL ‚Üí text se po≈°le do Make)
#   2) P≈ôid√°n√≠ nov√© persony (okam≈æitƒõ se objev√≠ v¬†seznamu)
# ------------------------------------------------------------------------------
# Z√ÅVISLOSTI: streamlit, requests, beautifulsoup4
#   pip install -r requirements.txt   (p≈ôidej beautifulsoup4)
# ------------------------------------------------------------------------------

import json, re, requests, streamlit as st
from bs4 import BeautifulSoup

# --- Make webhooky ------------------------------------------------------------
WEBHOOK_POST    = "https://hook.eu2.make.com/6m46qtelfmarmwpq1jqgomm403eg5xkw"
WEBHOOK_PERSONA = "https://hook.eu2.make.com/9yo8y77db7i6do272joo7ybfoue1qcoc"   # ‚Üê dopl≈à

# --- V√Ωchoz√≠ persony ----------------------------------------------------------
DEFAULT_PERSONAS = [
    "Daniel ≈†turm", "Martin C√≠gler", "Marek Steiger",
    "Krist√≠na Pastierik", "Lucie Jahnov√°"
]

# --- Session state ------------------------------------------------------------
if "person_list" not in st.session_state:
    st.session_state.person_list = DEFAULT_PERSONAS.copy()
if "show_persona_form" not in st.session_state:
    st.session_state.show_persona_form = False

# ------------------------------------------------------------------------------
st.set_page_config(page_title="LinkedIn bot", page_icon="üìù")
st.title("LinkedIn bot üìù")

# ------------------------------------------------------------------------------ 
# Pomocn√° funkce: vyt√°hnout text z¬†landing¬†page
# ------------------------------------------------------------------------------
def extract_page_text(url: str, max_chars: int = 2000) -> str:
    r = requests.get(
        url,
        timeout=10,
        headers={"User-Agent": "Mozilla/5.0 (compatible; LinkedIn-bot/1.0)"}
    )
    r.raise_for_status()

    soup = BeautifulSoup(r.text, "html.parser")

    for tag in soup(["script", "style", "noscript"]):
        tag.decompose()

    text = soup.get_text(separator="\n")
    text = re.sub(r"\s+\n", "\n", text)          # odmazat konce ≈ô√°dk≈Ø s¬†mezerami
    text = re.sub(r"\n{3,}", "\n\n", text).strip()
    return text[:max_chars]

# ============================= 1) FORMUL√Å≈ò¬†POSTU ==============================
with st.form("post_form"):
    topic = st.text_area("Jak√© m√° b√Ωt t√©ma p≈ô√≠spƒõvku?")
    landing_url = st.text_input("URL str√°nky (volitelnƒõ)")
    persona = st.radio(
        "ƒå√≠m stylem m√° b√Ωt p≈ô√≠spƒõvek naps√°n?",
        st.session_state.person_list
    )
    email = st.text_input("Na jak√Ω e‚Äëmail poslat draft?")
    submitted_post = st.form_submit_button("Odeslat")

# ---- Odeslat na Make ---------------------------------------------------------
if submitted_post:
    page_excerpt = ""
    if landing_url.strip():
        try:
            page_excerpt = extract_page_text(landing_url.strip())
        except Exception as e:
            st.warning(f"Nepoda≈ôilo se naƒç√≠st str√°nku: {e}")

    post_payload = {
        "personName":   persona,
        "postContent":  topic,
        "responseMail": email,
        "sourcePage":   page_excerpt          # nov√Ω kl√≠ƒç
    }

    with st.spinner("Generuji pomoc√≠ ChatGPT‚Ä¶"):
        try:
            res = requests.post(WEBHOOK_POST, json=post_payload, timeout=120)
            res.raise_for_status()
        except Exception as e:
            st.error(f"Chyba p≈ôi komunikaci s¬†Make: {e}")
            st.stop()

    try:
        post_text = res.json().get("post", "")
    except (ValueError, AttributeError):
        post_text = res.text                     # fallback

    post_md = post_text.strip().replace("\n", "  \n")
    st.success("Hotovo! Zde je vygenerovan√Ω p≈ô√≠spƒõvek:")
    st.markdown(post_md)

# ============================ 2) P≈òIDAT‚ÄØPERSONU ===============================
st.markdown("---")
st.header("‚ûï P≈ôidat novou personu")

if not st.session_state.show_persona_form:
    if st.button("P≈ôidat personu"):
        st.session_state.show_persona_form = True
        st.experimental_rerun()

else:
    with st.form("persona_form", clear_on_submit=True):
        col1, col2 = st.columns(2)

        with col1:
            name  = st.text_input("Jm√©no*")
            role  = st.text_input("Role / pozice*")
            tone  = st.text_area("Tone of Voice*")
        with col2:
            style   = st.text_area("Styl psan√≠*")
            lang    = st.selectbox("Jazyk*", ("ƒåe≈°tina", "Sloven≈°tina", "Angliƒçtina", "Jin√Ω"))
            sample  = st.text_area("Uk√°zkov√Ω p≈ô√≠spƒõvek*")

        submitted_persona = st.form_submit_button("Ulo≈æit personu")

    if submitted_persona:
        if not name.strip():
            st.error("Jm√©no je povinn√©.")
            st.stop()

        persona_payload = {
            "name":     name.strip(),
            "role":     role.strip(),
            "tone":     tone.strip(),
            "style":    style.strip(),
            "language": lang,
            "sample":   sample.strip()
        }

        with st.spinner("Ukl√°d√°m personu‚Ä¶"):
            try:
                rp = requests.post(WEBHOOK_PERSONA, json=persona_payload, timeout=30)
                rp.raise_for_status()
            except Exception as e:
                st.error(f"Chyba p≈ôi ukl√°d√°n√≠: {e}")
                st.stop()

        st.session_state.person_list.append(name.strip())
        st.session_state.show_persona_form = False
        st.success("Persona ulo≈æena ‚úîÔ∏è")
        st.experimental_rerun()
